#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TOOLS_PATH="${DIR}/.."

CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"

# настройка миграций, путь до файла миграций относительно относительно папки с запускаемым файлом
MIGRATE_PATH="migrate"
MIGRATE_MODULE_NAME="sprint.migration"

# Подключаем файл настроек
if [[ -f "${TOOLS_PATH}/deploy_settings/base.ini" ]]; then
    . ${TOOLS_PATH}/deploy_settings/base.ini
    if [[ -f "${TOOLS_PATH}/deploy_settings/${ENV_TYPE}.ini" ]]; then
        . ${TOOLS_PATH}/deploy_settings/${ENV_TYPE}.ini
    else
        echo "Файл настроек для зоны не найден"
        exit 25
    fi
else
    echo "Файл настроек не найден"
    exit 25
fi
PROJECT_PATH_FULL="${DIR}/${PROJECT_PATH}"

# Проверка веток, если отличаются предупреждаем
if [[ "${CURRENT_BRANCH}" != "${GIT_BRANCH}" ]]; then
    echo "Текущая ветка отлична от установленной. установленная - ${GIT_BRANCH}, текущая - ${CURRENT_BRANCH}";
    # Проверяем разрешено ли продолжать работу
    if [[ "${CONTINUE_DIFFERENCE}" != "Y" ]]; then
        exit 25;
    else
        GIT_BRANCH="${CURRENT_BRANCH}";
    fi
fi

# подключаем телеграм чат
#. ./lib/telegram

cd ${PROJECT_PATH_FULL}
STATUS=$(git status --short)
if [[ -n "${STATUS}" ]]; then
    echo "Есть незакомиченные изменния"
    exit 25
fi
# проверить изменения и закоммитить их если они есть
# send_telegram_message "начато обновление зоны ${ENV_TYPE}";
echo "Получение изменений из git"
git pull -q -v --ff --no-edit origin ${GIT_BRANCH}
git push origin ${GIT_BRANCH}
# сделать проверку на ошибки из гита
if [[ -f ".gitmodules" ]]; then
    git submodule update
    if [[ ! -n ${SUB_BRANCH} ]]; then
        SUB_BRANCH="master"
    fi;
    if [[ -n ${SUB_BRANCH} ]]; then
        git submodule foreach "git checkout ${SUB_BRANCH} && git pull -q -v --ff --no-edit origin ${SUB_BRANCH} && git push origin ${SUB_BRANCH}"
    fi
    # сделать проверку на ошибки из гита
fi
echo "Изменения из git получены"
echo "======"

cd ./${COMPOSER_DIRECTORY}
if [[ ! -f "composer.phar" ]]; then
    echo "не найден файл composer"
    echo "======"
    exit 25
fi
if [[ -f "composer.phar" && -f "composer.json" ]]; then
    echo "начало установки пакетов из composer"
    if [[ "${ENV_TYPE}" = "dev" ]]; then
        STATUS=$(${PHP_PATH} -d memory_limit=512M composer.phar install)
    else
        STATUS=$(${PHP_PATH} -d memory_limit=512M composer.phar install --no-dev)
    fi
    if [[ ${STATUS} =~ "error" ]]; then
        echo "${STATUS}"
        echo "Ошибка при установке композера"
        exit 25
    fi
    # добавить проверку на ошибки
    echo "Установка пакетов из composer завершена"
    echo "======"
fi

cd ${DIR}
MIGRATE_FILE="${DIR}/${MIGRATE_PATH}"
LOCAL_MIGRATE_MODULE="${PROJECT_PATH_FULL}/local/modules/${MIGRATE_MODULE_NAME}"
BITRIX_MIGRATE_MODULE="${PROJECT_PATH_FULL}/bitrix/modules/${MIGRATE_MODULE_NAME}"
if [[ -f "${MIGRATE_FILE}" ]] && ( [[ -d "${LOCAL_MIGRATE_MODULE}" ]] || [[ -d "${BITRIX_MIGRATE_MODULE}" ]] ); then
    echo "начало миграций"
    STATUS=$(${PHP_PATH} ${MIGRATE_PATH} ${PROJECT_PATH_FULL})
    if [[ ${STATUS} =~ "error" ]]; then
        echo "${STATUS}"
        echo "Ошибка при установке миграций"
        exit 25
    fi
    # добавить проверку на ошибки
    echo "Миграции установлены"
    echo "======"
fi
if [[ "${ENV_TYPE}" = "prod" ]]; then
    if [[ "${DEL_BRANCH}" = "Y" ]]; then
        git branch -d ${GIT_BRANCH}
        git push origin --delete ${GIT_BRANCH}
    fi
    git remote prune origin
    echo "Очистка git завершена"
    echo "======"
fi
#send_telegram_message "обновление зоны ${ENV_TYPE} завершено успешно";